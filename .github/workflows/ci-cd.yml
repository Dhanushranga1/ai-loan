name: 🏦 AI Loan Approval CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ai-loan-approval
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # 🔍 Code Quality & Testing
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 Lint Code
        run: npm run lint:demo

      - name: 📋 Type Check
        run: npm run type-check

      - name: 🧪 Run Unit Tests
        run: npm run test

  # 🏗️ Build Application
  build:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Application
        run: npm run build

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 1

  # 🐳 Docker Build & Push
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🚀 Deploy (Simulated for Demo)
  deploy:
    name: 🚀 Deploy Application
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: production
      url: https://ai-loan-approval.example.com
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Simulate Deployment
        run: |
          echo "🚀 Deploying AI Loan Approval System..."
          echo "📦 Image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "🌍 Environment: Production"
          echo "⏰ Timestamp: $(date)"
          
          # Simulate deployment steps
          echo "🔄 Pulling latest image..."
          sleep 2
          echo "🔄 Stopping existing container..."
          sleep 1
          echo "🔄 Starting new container..."
          sleep 2
          echo "❤️ Running health checks..."
          sleep 1
          echo "✅ Deployment successful!"

      - name: ❤️ Health Check
        run: |
          echo "🔍 Performing health checks..."
          # Simulate health check
          if [ $((RANDOM % 10)) -lt 9 ]; then
            echo "✅ Application is healthy"
            echo "📊 Status: All systems operational"
            echo "🔗 API Endpoint: Responding correctly"
            echo "💾 Database: Connected and responsive"
          else
            echo "❌ Health check failed"
            exit 1
          fi

  # 📊 Post-Deployment
  post-deploy:
    name: 📊 Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && needs.deploy.result == 'success'
    steps:
      - name: 📢 Notify Success
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📈 Build Number: ${{ github.run_number }}"
          echo "🏷️ Version: ${{ github.sha }}"
          echo "👤 Deployed by: ${{ github.actor }}"
          echo "🕐 Deployed at: $(date)"

      - name: 📊 Generate Deployment Summary
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## 🚀 Deployment Summary
          
          | Field | Value |
          |-------|-------|
          | 🏷️ Version | \`${{ github.sha }}\` |
          | 🌿 Branch | \`${{ github.ref_name }}\` |
          | 👤 Author | ${{ github.actor }} |
          | ⏰ Time | $(date) |
          | 🎯 Environment | Production |
          | 📦 Image | \`${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\` |
          
          ### ✅ Pipeline Stages Completed:
          - 🔍 Code Quality Checks
          - 🧪 Unit Testing
          - 🏗️ Application Build
          - 🐳 Docker Image Creation
          - 🚀 Production Deployment
          - ❤️ Health Verification
          
          **Status: 🟢 Deployment Successful**
          EOF
